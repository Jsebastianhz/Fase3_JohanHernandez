CREATE  tablespace VENTAS_
datafile 'C:/Pruebas/VENTAS.dbf'
size 1m
AUTOEXTEND ON NEXT 200K MAXSIZE 1400K
DEFAULT STORAGE (
	INITIAL 16K
	NEXT 17K
	MINEXTENTS 1
	MAXEXTENTS 3);

create tablespace FACTURACION_
datafile 'C:/Pruebas/FACTURACION.dbf'
size 1m
AUTOEXTEND ON NEXT 100K MAXSIZE 2000K
DEFAULT STORAGE (
	INITIAL 16K
	NEXT 17K
	MINEXTENTS 1
	MAXEXTENTS 3);
    
create tablespace PEDIDOS_
datafile 'C:/Pruebas/PEDIDOS.dbf'
size 1m
AUTOEXTEND ON NEXT 100K MAXSIZE 5000K
DEFAULT STORAGE (
	INITIAL 16K
	NEXT 17K
	MINEXTENTS 1
	MAXEXTENTS 3);
    
--tablas
/* PRODUCTO (ID, NOMBRE, CATEGORIA, EXISTENCIA, PRECIO, FECHA DE ACTUALIZACIÓN) */
CREATE TABLE PRODUCTO (
    ID_PRODUCTO NUMBER(10) PRIMARY KEY,
    NOMBRE_PRODUCTO VARCHAR2(100) NOT NULL,
    CATEGORIA VARCHAR2(50) NOT NULL,
    EXISTENCIA NUMBER(5) NOT NULL,
    PRECIO NUMBER(10, 2) NOT NULL,
    FECHA_ACTUALIZACION DATE NOT NULL
);

/* CLIENTE (IDENTIFICACIÓN, NOMBRES, CIUDAD DE RESIDENCIA, DIRECCION, FECHA DE NACIMIENTO, TELÉFONO, EMAIL, FECHA DE ACTUALIZACION) */
CREATE TABLE CLIENTE (
    ID_CLIENTE NUMBER(10) PRIMARY KEY,
    NOMBRE_CLIENTE VARCHAR2(100) NOT NULL,
    CIUDAD_RESIDENCIA VARCHAR2(50) NOT NULL,
    DIRECCION VARCHAR2(100) NOT NULL,
    FECHA_NACIMIENTO DATE NOT NULL,
    TELEFONO VARCHAR2(20) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL,
    FECHA_ACTUALIZACION DATE NOT NULL
);
/* VENDEDORES (ID, NOMBRE, DIRECCION, FECHA DE NACIMIENTO, SUELDO, TELÉFONO, EMAIL, FECHA_ACTUALIZACION) */
CREATE TABLE VENDEDORES (
    ID_VENDEDOR NUMBER(10) PRIMARY KEY,
    NOMBRE_VENDEDOR VARCHAR2(100) NOT NULL,
    DIRECCION VARCHAR2(100) NOT NULL,
    FECHA_NACIMIENTO DATE NOT NULL,
    SUELDO NUMBER(10, 2) NOT NULL,
    TELEFONO VARCHAR2(20) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL,
    FECHA_ACTUALIZACION DATE NOT NULL
);
/ORDEN (ID, CLIENTE, VENDEDOR, FECHA_PEDIDO, ESTADO, VALOR)/
CREATE TABLE ORDEN (
    ID_ORDEN NUMBER(10) PRIMARY KEY,
    ID_CLIENTE NUMBER(10) NOT NULL,
    ID_VENDEDOR NUMBER(10) NOT NULL,
    FECHA_PEDIDO DATE NOT NULL,
    ESTADO VARCHAR2(50) NOT NULL,
    VALOR NUMBER(10, 2) NOT NULL,
    FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES (ID_CLIENTE),
    FOREIGN KEY (ID_VENDEDOR) REFERENCES VENDEDOR (ID_VENDEDOR)
);
/* PRODUCTOS_ORDEN (ID_ORDEN, ID_PRODUCTO, CANTIDAD, PRECIO) */
CREATE TABLE PRODUCTOS_ORDEN (
    ID_ORDEN NUMBER(10) NOT NULL,
    ID_PRODUCTO NUMBER(10) NOT NULL,
    CANTIDAD NUMBER(5) NOT NULL,
    PRECIO NUMBER(10, 2) NOT NULL,
    PRIMARY KEY (ID_ORDEN, ID_PRODUCTO),
    FOREIGN KEY (ID_ORDEN) REFERENCES ORDENES (ID_ORDEN),
    FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS (ID_PRODUCTO)
);
/* FACTURAS (ID, ID_VENDEDOR, ID_CLIENTE, ID_ORDEN, ESTADO, FECHA, VALOR) */
CREATE TABLE FACTURAS (
    ID_FACTURA NUMBER(10) PRIMARY KEY,
    ID_VENDEDOR NUMBER(10) NOT NULL,
    ID_CLIENTE NUMBER(10) NOT NULL,
    ID_ORDEN NUMBER(10) NOT NULL,
    ESTADO VARCHAR2(50) NOT NULL,
    FECHA DATE NOT NULL,
    VALOR NUMBER(10, 2) NOT NULL,
    FOREIGN KEY (ID_VENDEDOR) REFERENCES VENDEDOR (ID_VENDEDOR),
    FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES (ID_CLIENTE),
    FOREIGN KEY (ID_ORDEN) REFERENCES ORDENES (ID_ORDEN)
);

  
--usuarios
ALTER session set "_ORACLE_SCRIPT"=true;

CREATE USER Admin_123 IDENTIFIED BY 123
DEFAULT TABLESPACE USERS
TEMPORARY TABLESPACE TEMP
QUOTA 500K ON USERS;

CREATE USER App_123 IDENTIFIED BY 123
DEFAULT TABLESPACE USERS
TEMPORARY TABLESPACE TEMP
QUOTA 500K ON USERS;

CREATE USER Report_123 IDENTIFIED BY 123
DEFAULT TABLESPACE USERS
TEMPORARY TABLESPACE TEMP
QUOTA 500K ON USERS;

CREATE USER Security_123 IDENTIFIED BY 123
DEFAULT TABLESPACE USERS
TEMPORARY TABLESPACE TEMP
QUOTA 500K ON USERS;

--Asignar roles
GRANT CREATE SESSION TO "ADMIN_123";
GRANT CREATE USER TO "ADMIN_123";

GRANT SELECT, INSERT, UPDATE, DELETE ON PRODUCTO TO APP_123;
GRANT SELECT, INSERT, UPDATE, DELETE ON CLIENTE TO APP_123;
GRANT SELECT, INSERT, UPDATE, DELETE ON VENDEDORES TO APP_123;
GRANT SELECT, INSERT, UPDATE, DELETE ON ORDEN TO APP_123;
GRANT SELECT, INSERT, UPDATE, DELETE ON PRODUCTOS_ORDEN TO APP_123;
GRANT SELECT, INSERT, UPDATE, DELETE ON FACTURAS TO APP_123;

GRANT SELECT ON PRODUCTO TO REPORT_123;
GRANT SELECT ON CLIENTE TO REPORT_123;
GRANT SELECT ON VENDEDORES TO REPORT_123;
GRANT SELECT ON ORDEN TO REPORT_123;
GRANT SELECT ON PRODUCTOS_ORDEN TO REPORT_123;
GRANT SELECT ON FACTURAS TO REPORT_123;

GRANT CREATE SESSION TO SECURITY123;
GRANT ALTER USER TO SECURITY123;

--Consultas de vistas
/* información sobre los perfiles de usuario*/
SELECT * FROM DBA_PROFILES;

/información sobre los roles en la base de datos/
SELECT * FROM DBA_ROLES;

/información sobre los usuarios de la base de datos/
SELECT * FROM DBA_USERS;    

/* información sobre los privilegios asignados a roles*/
SELECT * FROM DBA_ROLE_PRIVS;

/* información sobre estadísticas de usuario*/
SELECT * FROM DBA_USTATS;

CREATE USER Sebastian_Hernandez
  IDENTIFIED EXTERNALLY
  DEFAULT TABLESPACE USERS
  TEMPORARY TABLESPACE TEMP
  QUOTA 500K ON USERS;
  
/privilegios del sistema para user SebastianHernandez/
SELECT * FROM DBA_SYS_PRIVS WHERE GRANTEE = 'Sebastian_Hernandez';

/roles para user SebastianHernandez/
SELECT * FROM DBA_ROLE_PRIVS WHERE GRANTEE = 'Sebastian_Hernandez';

/privilegios sobre objetos para user SebastianHernandez/
SELECT * FROM DBA_TAB_PRIVS WHERE GRANTEE = 'Sebastian_Hernandez';
SELECT * FROM DBA_SYS_PRIVS WHERE GRANTEE = 'Sebastian_Hernandez';

ALTER USER Sebastian_Hernandez IDENTIFIED BY 14;


SELECT sys_context('userenv', 'service_name') FROM dual;


ALTER USER SebastianHernandez GRANT CONNECT THROUGH "$USERS";


sqlplus SebastianHernandez/14@$USERS


GRANT CREATE SESSION, ALTER SESSION TO Sebastian_Hernandez;

ALTER USER Sebastian_Hernandez
CONNECT THROUGH USERS;



sqlplus SebastianHernandez/14@$USERS

CREATE ROLE MI_PROPIO_ROL_;

GRANT SELECT, INSERT, UPDATE, DELETE ON CLIENTE TO MI_PROPIO_ROL_;
GRANT SELECT, INSERT, UPDATE, DELETE ON PRODUCTO TO MI_PROPIO_ROL_;
GRANT SELECT, INSERT, UPDATE, DELETE ON CLIENTE TO MI_PROPIO_ROL_;
GRANT SELECT, INSERT, UPDATE, DELETE ON VENDEDORES TO MI_PROPIO_ROL_;
GRANT SELECT, INSERT, UPDATE, DELETE ON ORDEN TO MI_PROPIO_ROL_;
GRANT SELECT, INSERT, UPDATE, DELETE ON PRODUCTOS_ORDEN TO MI_PROPIO_ROL_;
GRANT SELECT, INSERT, UPDATE, DELETE ON FACTURAS TO MI_PROPIO_ROL_;



CREATE USER factura1394 IDENTIFIED BY 123
DEFAULT TABLESPACE VENTAS
TEMPORARY TABLESPACE TEMP;

GRANT CONNECT, RESOURCE TO factura1394;

CREATE USER VENTAS_ IDENTIFIED BY 14;
ALTER USER VENTAS_ DEFAULT TABLESPACE VENTAS_;

CREATE TABLE VENTAS.PRODUCTO (
    ID_PRODUCTO NUMBER(10) PRIMARY KEY,
    NOMBRE_PRODUCTO VARCHAR2(100) NOT NULL,
    CATEGORIA VARCHAR2(50) NOT NULL,
    EXISTENCIA NUMBER(5) NOT NULL,
    PRECIO NUMBER(10, 2) NOT NULL,
    FECHA_ACTUALIZACION DATE NOT NULL
);
CREATE TABLE VENTAS.CLIENTE (
    ID_CLIENTE NUMBER(10) PRIMARY KEY,
    NOMBRE_CLIENTE VARCHAR2(100) NOT NULL,
    CIUDAD_RESIDENCIA VARCHAR2(50) NOT NULL,
    DIRECCION VARCHAR2(100) NOT NULL,
    FECHA_NACIMIENTO DATE NOT NULL,
    TELEFONO VARCHAR2(20) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL,
    FECHA_ACTUALIZACION DATE NOT NULL
);
CREATE TABLE VENTAS.VENDEDORES (
    ID_VENDEDOR NUMBER(10) PRIMARY KEY,
    NOMBRE_VENDEDOR VARCHAR2(100) NOT NULL,
    DIRECCION VARCHAR2(100) NOT NULL,
    FECHA_NACIMIENTO DATE NOT NULL,
    SUELDO NUMBER(10, 2) NOT NULL,
    TELEFONO VARCHAR2(20) NOT NULL,
    EMAIL VARCHAR2(100) NOT NULL,
    FECHA_ACTUALIZACION DATE NOT NULL
);
CREATE TABLE VENTAS.ORDEN (
    ID_ORDEN NUMBER(10) PRIMARY KEY,
    ID_CLIENTE NUMBER(10) NOT NULL,
    ID_VENDEDOR NUMBER(10) NOT NULL,
    FECHA_PEDIDO DATE NOT NULL,
    ESTADO VARCHAR2(50) NOT NULL,
    VALOR NUMBER(10, 2) NOT NULL,
    FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES (ID_CLIENTE),
    FOREIGN KEY (ID_VENDEDOR) REFERENCES VENDEDOR (ID_VENDEDOR)
);
CREATE TABLE VENTAS.PRODUCTOS_ORDEN (
    ID_ORDEN NUMBER(10) NOT NULL,
    ID_PRODUCTO NUMBER(10) NOT NULL,
    CANTIDAD NUMBER(5) NOT NULL,
    PRECIO NUMBER(10, 2) NOT NULL,
    PRIMARY KEY (ID_ORDEN, ID_PRODUCTO),
    FOREIGN KEY (ID_ORDEN) REFERENCES ORDENES (ID_ORDEN),
    FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS (ID_PRODUCTO)
);
CREATE TABLE VENTAS.FACTURAS (
    ID_FACTURA NUMBER(10) PRIMARY KEY,
    ID_VENDEDOR NUMBER(10) NOT NULL,
    ID_CLIENTE NUMBER(10) NOT NULL,
    ID_ORDEN NUMBER(10) NOT NULL,
    ESTADO VARCHAR2(50) NOT NULL,
    FECHA DATE NOT NULL,
    VALOR NUMBER(10, 2) NOT NULL,
    FOREIGN KEY (ID_VENDEDOR) REFERENCES VENDEDOR (ID_VENDEDOR),
    FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTES (ID_CLIENTE),
    FOREIGN KEY (ID_ORDEN) REFERENCES ORDENES (ID_ORDEN)
);

CREATE INDEX idx_nombre_cliente ON clientes (nombre_cliente);

-------------

-- Crear un índice en la tabla ORDEN
CREATE INDEX idx_ordenes_cliente ON ORDEN (ID_CLIENTE);

-- Crear un índice en la tabla FACTURAS
CREATE INDEX idx_factura_cliente ON FACTURAS (ID_CLIENTE);


-- Comenzar una transacción (no es necesario, ya que las transacciones son implícitas)
-- START TRANSACTION;

-- Intentar realizar una serie de operaciones SQL
-- Por ejemplo, una inserción en la tabla 'ORDENES'
BEGIN
    -- Insertar en la tabla 'ORDENES'
    INSERT INTO ORDENES (id_cliente, id_vendedor, fecha_pedido, estado, valor)
    VALUES (1, 2, DATE '2023-10-22', 'en proceso', 100.00);
    
    -- Insertar en la tabla 'FACTURA'
    INSERT INTO FACTURA (id_vendedor, id_cliente, id_orden, estado, fecha, valor)
    VALUES (2, 1, LAST_INSERT_ID(), 'en proceso', DATE '2023-10-22', 100.00);
    
    -- Confirmar la transacción si todas las operaciones son exitosas
    COMMIT;
EXCEPTION
    -- En caso de error, deshacer la transacción con ROLLBACK
    WHEN OTHERS THEN
        ROLLBACK;
END;



-- Crear una secuencia para generar un ID único para ORDEN
CREATE SEQUENCE orden_id_seq START WITH 1 INCREMENT BY 1;

-- START TRANSACTION;

DECLARE
    nuevo_id NUMBER;
BEGIN
    -- Insertar en la tabla 'ORDEN' y obtener el nuevo ID de la secuencia
    INSERT INTO ORDEN (id_orden, id_cliente, id_vendedor, fecha_pedido, estado, valor)
    VALUES (orden_id_seq.NEXTVAL, 1, 2, DATE '2023-10-22', 'en proceso', 100.00)
    RETURNING id_orden INTO nuevo_id;

    -- Insertar en la tabla 'FACTURAS' utilizando el mismo ID generado
    INSERT INTO FACTURAS (id_factura, id_vendedor, id_cliente, id_orden, estado, fecha, valor)
    VALUES (nuevo_id, 2, 1, nuevo_id, 'en proceso', DATE '2023-10-22', 100.00);

    -- Confirmar la transacción si todas las operaciones son exitosas
    COMMIT;
EXCEPTION
    -- En caso de error, deshacer la transacción con ROLLBACK
    WHEN OTHERS THEN
        ROLLBACK;
END;
